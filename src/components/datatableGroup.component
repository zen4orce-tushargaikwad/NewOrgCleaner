<apex:component Controller="ConfigurationCleanUpService">
     <apex:attribute name="typeofConfig" description="sample" type="String" required="true"/>
     <apex:attribute name="Header1" description="" type="String" required="true"/>
    <apex:attribute name="Header2" description="" type="String" required="true"/>
    <apex:attribute name="Header3" description="" type="String" required="true"/>
    <apex:attribute name="Icon1" description="" type="String" required="true"/>
    <apex:attribute name="jsonData" description="" type="String" required="true"/>
    
    <apex:form >
            <script>
            j$ = jQuery.noConflict();
             var configType = '{!typeofConfig}';
        debugger;
        	
        var configJsonData{!typeofConfig} = {!jsonData};
          
        var {!typeofConfig}PreviewTable;//triggerPreviewTable
        var {!typeofConfig}SelectedTable;//selectedTriggersTable
        var {!typeofConfig}ObjTable;//triggerObjTable
        var {!typeofConfig}ObjectData = [];//triggersObjectData
        var {!typeofConfig}Data = [];//triggersData
        var {!typeofConfig}SelectedData = [];//selectedTriggersData 
        j$(document).ready(function () { 
             debugger;
            //Get{!typeofConfig}('{!typeofConfig}');
            
             toastr.options = {
  				"closeButton": false,
  				"debug": false,
  				"newestOnTop": false,
  				"progressBar": false,
  				"positionClass": "toast-top-right",
  				"preventDuplicates": false,
  				"onclick": null,
  				"showDuration": "300",
  				"hideDuration": "1000",
  				"timeOut": "5000",
  				"extendedTimeOut": "1000",
  				"showEasing": "swing",
  				"hideEasing": "linear",
  				"showMethod": "fadeIn",
  				"hideMethod": "fadeOut"
			};
           
             {!typeofConfig}PreviewTable = j$('#{!typeofConfig}byObjectDTTable').DataTable({ 
         		"paging":   false,
        		"ordering": false,
        		"info":     false
      			});
            
               {!typeofConfig}SelectedTable = j$('#{!typeofConfig}SelectedDTTable').DataTable({
         		"paging":   false,
        		"ordering": false,
        		"info":     false
      			});
            
                        for (var i = 0; i < configJsonData{!typeofConfig}.data.length; i++) {
                            var item = configJsonData{!typeofConfig}.data[i];
                            if(item.parent == ''){
                            	{!typeofConfig}ObjectData.push({
                                	"name": item.name
                            	}); 
                            }
                        }
                 
                    {!typeofConfig}ObjTable = j$('#{!typeofConfig}ObjectTable').DataTable( {
        			data: {!typeofConfig}ObjectData,
                        "oLanguage": {
         					"sInfo": "_TOTAL_ entries",//"_START_ to _END_ of _TOTAL_ entries",
         					"sInfoEmpty": "0 to 0 of 0 entries",
                            "oPaginate": {
                                //"sFirst": "First page", // This is the link to the first page
								"sPrevious": "<", // This is the link to the previous page
                                "sNext": ">"//, // This is the link to the next page
                                //"sLast": "Last page" // This is the link to the last page
							}
      					},
        			columns: [
           					{ "data": "name" },
             				{"data":   "name",'bSortable': false,
                				render: function ( data, type, row ) {
                    			if ( type === 'display' ) {
                                    return '<input id="{!typeofConfig}ObjectCheck_'+row.name+'" class="object{!typeofConfig}" type="checkbox" />';
                    			}
                    			return data;
                						}
            				}, 
            				{"data":   "name",'bSortable': false,
                				render: function ( data, type, row ) {
                    			if ( type === 'display' ) {
                        			return '<a class="selective">Selective</a>';
                    			}
                    			return data;
                					}
            				}
        		]});	
        });
          
      
        
        
        function delete{!typeofConfig}() {	
                 debugger;
                 showLoader();
                 console.log(this);
                 var {!typeofConfig}ToDelete = [];
                 if({!typeofConfig}SelectedData != null){
                     
                 	for(var iCount = 0;iCount < {!typeofConfig}SelectedData.length;iCount++){
                 		if({!typeofConfig}ToDelete != ''){
                    	{!typeofConfig}ToDelete = {!typeofConfig}SelectedData[iCount].configID +','+ {!typeofConfig}ToDelete;
                        }
                        else{
                            {!typeofConfig}ToDelete = {!typeofConfig}SelectedData[iCount].configID;
                        }
                    }
                 }
                 if({!typeofConfig}ToDelete != null && {!typeofConfig}ToDelete.length > 0){ 
    				CleanConfigurations{!typeofConfig}({!typeofConfig}ToDelete,'{!typeofConfig}');
    			}
    			else{
                    hideLoader();
                     toastr.error('No {!typeofConfig} selected');
    			}
			}
   		
        j$(document).delegate(".{!typeofConfig}Individualobject", "click", function() {
  				 var tableRow = j$(this).closest('tr');
                 var selectedData = {!typeofConfig}PreviewTable.row(tableRow).data();
                loadSelected{!typeofConfig}Table(selectedData.name,this.checked,true);
                toastr.success(selectedData.name + ' trigger added in Selected Triggers section');
			});
        j$(document).delegate("#{!typeofConfig}ObjectTable .selective", "click", function() {
                var tableRow = j$(this).closest('tr');
                var selectedData = {!typeofConfig}ObjTable.row(tableRow).data();
                loadChildTable{!typeofConfig}(selectedData.name);
                toastr.info(selectedData.name + ' triggers will be displayed in Triggers section');
			});
        j$(document).delegate("#{!typeofConfig}ObjectTable .object{!typeofConfig}", "click", function() {
                var tableRow = j$(this).closest('tr');
                var isSelected = this.checked;
                var selectedData = {!typeofConfig}ObjTable.row(tableRow).data();
                loadSelected{!typeofConfig}Table(selectedData.name,isSelected,false);
                if(isSelected){
                toastr.success(selectedData.name + ' triggers added in Selected Triggers section');
                }
			});
        
        
        function initialTableLoad{!typeofConfig}(){
                
        		
                
              
        	}
        function loadChildTable{!typeofConfig}(objectName){
                console.log(objectName);
                {!typeofConfig}Data = [];
                        for (var i = 0; i < configJsonData{!typeofConfig}.data.length; i++) {
                            var item = configJsonData{!typeofConfig}.data[i];
                            if(item.parentName == objectName){
                            	{!typeofConfig}Data.push({
                                	"name": item.name,
                                    "enbl": item.enbl,
                                    "configID":item.configID
                            	}); 
                            }
                        }
                {!typeofConfig}PreviewTable.destroy();
                {!typeofConfig}PreviewTable = j$('#{!typeofConfig}byObjectDTTable').DataTable( {
                    "fnPreDrawCallback": function( oSettings ) {
                        // alert("draw call back");
                    },
                    "initComplete": function(settings, json) {
                        //alert( 'init complete.' );
  					},
                    "oLanguage": {
         					"sInfo": "_TOTAL_ entries",//"_START_ to _END_ of _TOTAL_ entries",
         					"sInfoEmpty": "0 to 0 of 0 entries",
                        	"oPaginate": {
								"sPrevious": "<", // This is the link to the previous page
                                "sNext": ">"// This is the link to the next page
							}
      					},
        			data: {!typeofConfig}Data,
                    "destroy": true,
        			columns: [{ "data": "name" },
        					{ "data": "configID", "visible": false },
                             {"data":   "enbl",'bSortable': false,
                				render: function ( data, type, row ) {
                    			if ( type === 'display' ) {
                                    if(row.enbl == "1"){
                                    	return '<input id="IndividualObject{!typeofConfig}Check_'+row.name+'" class="{!typeofConfig}Individualobject" type="checkbox" checked />';
                                    }
                                    else{
                                        return '<input id="IndividualObject{!typeofConfig}Check_'+row.name+'" class="{!typeofConfig}Individualobject" type="checkbox" />';
                                    }
                    			}
                    			return data;
                						}
            				}, 
                             ]});	
                              
            }
        function loadSelected{!typeofConfig}Table(objectName,isSelected,isChild){
                console.log(objectName);
                 {!typeofConfig}SelectedData = [];
                        for (var i = 0; i < configJsonData{!typeofConfig}.data.length; i++) {
                            var item = configJsonData{!typeofConfig}.data[i];
                            if(item.name == objectName && isChild){
                    			item.enbl = isSelected ? '1' : '0';
                            }	
                            if(item.parentName == objectName || item.enbl == '1' || (isChild && item.name == objectName)){
                                 if(item.parentName == objectName){
                            		item.enbl = isSelected ? '1' : '0';
                                }
                                //item.enbl = '1';
                                if(item.enbl == '1'){
                                    //if(item.name != objectName)
                                    // {
                            		{!typeofConfig}SelectedData.push({
                                		"name": item.name,
                                		"configID":item.parentName+'$'+item.configID+'$'+item.name
                            		}); 
                                    // }
                                }
                            }
                        }
                {!typeofConfig}SelectedTable.destroy();
                {!typeofConfig}SelectedTable = j$('#{!typeofConfig}SelectedDTTable').DataTable( {
        			data: {!typeofConfig}SelectedData,
                    "oLanguage": {
                        "sInfo": "_TOTAL_ entries",//"_START_ to _END_ of _TOTAL_ entries",
         					"sInfoEmpty": "0 to 0 of 0 entries",
                        	"oPaginate": {
								"sPrevious": "<", // This is the link to the previous page
                                "sNext": ">"// This is the link to the next page
							}
      					},
        			columns: [{ "data": "name" },{ "data": "configID", "visible": false }]});	
                  
            }
        function CleanConfigurationsCompleted(){
                hideLoader();
         	toastr.success('Batch is initiated. Email notification will be sent to you soon.');
         	}
            //  function GetConfigurationDetailsOnCompleted{!typeofConfig}(){
            // 	toastr.success('Call Completed!...');
            //    initialTableLoad{!typeofConfig}();
            //  }
            </script>
		

	<body>
      
  
         <div class="row">
           
  			<div class="col-md-4">
               <h3>
                    <span class="glyphicon glyphicon-cloud" aria-hidden="true"></span> {!Header1} 
                </h3>
            	<table id="{!typeofConfig}ObjectTable" class="display" width="100%"><!--triggersObjectTable-->
        		<thead>
            		<tr>
                		<th>Name</th>
                        <th>Action</th>
                        <th>Selective</th>
            		</tr>
        		</thead>
        		<tfoot>
            		<tr>
                		<th>Name</th>
                        <th>Action</th>
                        <th>Selective</th>
            		</tr>
        		</tfoot>
        		</table>
                
            </div>
                            
  			<div class="col-md-4">
                 <h3>
                   <span class="glyphicon glyphicon-cog" aria-hidden="true"></span> {!Header2} 
                </h3>
    			<table id="{!typeofConfig}byObjectDTTable" class="display" width="100%"><!--triggersbyObjectDTTable-->
        		<thead>
            		<tr>
                		<th>Name</th>
                		<th></th>
                        <th></th>
            		</tr>
        		</thead>
        		<tfoot>
            		<tr>
                		<th>Name</th>
                		<th></th>
                        <th></th>
            		</tr>
        		</tfoot>
        		</table>	
            </div>
                          
  			<div class="col-md-4">
                 <h3>
                    <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> {!Header3} 
                </h3>
    			<table id="{!typeofConfig}SelectedDTTable" class="display" width="100%"><!--selectedTriggersDTTable-->
        		<thead>
            		<tr>
                		<th>Name</th>
                		<th></th>
            		</tr>
        		</thead>
        		<tfoot>
            		<tr>
                		<th>Name</th>
                		<th></th>
            		</tr>
        		</tfoot>
        		</table>
            </div>
            
		</div>
				<div class="btn-group" style="float:right;">
  <p><apex:outputText value="" id="view" /></p>
        <apex:outPutPanel id="renderApexPage" rendered="true">
		<apex:outputLabel value="{!lstDependentClasses}"></apex:outputLabel>
        <apex:outputLabel value="{!lstDependentPages}"></apex:outputLabel>
        <apex:outputLabel value="{!lstDependentTriggers}"></apex:outputLabel>
       </apex:outPutPanel> 
        <apex:actionFunction name="CleanConfigurations{!typeofConfig}" action="{!CleanConfigurations}" rerender="renderApexPage" oncomplete="CleanConfigurationsCompleted();">     
     		<apex:param id="triggers" name="selectedTrigger"  assignTo="{!ConfigurationList}" value="" />
            <apex:param id="configName" name="configName"  assignTo="{!ConfigName}" value="" />
 		</apex:actionFunction>
        <apex:commandLink onclick="delete{!typeofConfig}();return false;" >               
       		<apex:commandButton value="Proceed" styleClass="btn btn-default" />
        </apex:commandLink>
</div>
      
	</body>
      
	</apex:form>
</apex:component>